{"version":3,"sources":["../src/boot.js"],"names":["require","module","exports","whichPackage","_","config","utils","shell","scrolex","runtime","scripts","dockerCmd","__dirname","trace","cmdName","process","argv","cmd","persistOpts","announce","addCommandAsComponent","components","env","NODE_ENV","lanyonEnv","JEKYLL_ENV","LANYON_PROJECT","projectDir","main","failure","exit","stick","type","version","pid","__filename","cacheDir","gitRoot","npmRoot","match","initProject","forEach","hook","needEnv","split","squashedHooks","isArray","join","exe","cwd","writeConfig","isFunction","err","isString","replace","lanyonDir","contentBuildDir","npmBins","name","tests","found","test","Error","pat","RegExp","binDir","stdio","mode","indexOf","SCROLEX_MODE","Object","keys","boot"],"mappings":"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","file":"boot.js","sourcesContent":["require('babel-polyfill')\nmodule.exports = async function boot (whichPackage) {\n  const _       = require('lodash')\n  const config  = require('./config')\n  const utils   = require('./utils')\n  const shell   = require('shelljs')\n  const scrolex = require('scrolex')\n  const runtime = config.runtime\n\n  const scripts = {\n    'build:assets'             : 'webpack --config [cacheDir]/webpack.config.js',\n    'build:content:incremental': 'jekyll build --incremental --source [projectDir] --destination [contentBuildDir] --verbose --config [projectDir]/_config.yml,[cacheDir]/jekyll.config.yml,[cacheDir]/jekyll.lanyon_assets.yml',\n    'build:content:watch'      : 'nodemon --config [cacheDir]/nodemon.config.json --exec \"[lanyon] build:content:incremental' + '\"',\n    'build:content'            : 'jekyll build --source [projectDir] --destination [contentBuildDir] --verbose --config [projectDir]/_config.yml,[cacheDir]/jekyll.config.yml,[cacheDir]/jekyll.lanyon_assets.yml',\n    // @todo: useless until we have: https://github.com/imagemin/imagemin-cli/pull/11 and https://github.com/imagemin/imagemin/issues/226\n    // 'build:images'             : 'imagemin [projectDir]/assets/images --out-dir=[projectDir]/assets/build/images',\n    'build'                    : '[lanyon] build:assets && [lanyon] build:content', // <-- parrallel won't work for production builds, jekyll needs to copy assets into _site\n    'container:connect'        : utils.dockerCmd(runtime, 'sh', '--interactive --tty'),\n    'deploy'                   : require(`${__dirname}/deploy`),\n    'encrypt'                  : require(`${__dirname}/encrypt`),\n    'help'                     : 'jekyll build --help',\n    'list:ghpgems'             : 'bundler exec github-pages versions --gem',\n    'install'                  : require(`${__dirname}/install`),\n    'serve'                    : 'browser-sync start --config [cacheDir]/browsersync.config.js',\n    'start'                    : '[lanyon] build:assets && [lanyon] build:content:incremental && parallelshell \"[lanyon] build:content:watch\" \"[lanyon] serve\"',\n  }\n\n  if (runtime.trace) {\n    scripts['build:content:incremental'] += ' --trace'\n    scripts['build:content']             += ' --trace'\n  }\n\n  const cmdName = process.argv[2]\n  let cmd       = scripts[cmdName]\n\n  scrolex.persistOpts({\n    announce             : true,\n    addCommandAsComponent: true,\n    components           : `lanyon>${cmdName}`,\n    env                  : Object.assign({}, process.env, {\n      NODE_ENV      : runtime.lanyonEnv,\n      JEKYLL_ENV    : runtime.lanyonEnv,\n      LANYON_PROJECT: runtime.projectDir, // <-- to preserve the cwd over multiple nested executes, if it wasn't initially set\n    }),\n  })\n\n  if (require.main === module) {\n    scrolex.failure(`Please only used this module via require`)\n    process.exit(1)\n  }\n\n  scrolex.stick(`Booting ${whichPackage.type} Lanyon->${cmdName}. Version: ${whichPackage.version} on PID: ${process.pid} from: ${__filename}`)\n  scrolex.stick(`Detected cacheDir as \"${runtime.cacheDir}\"`)\n  scrolex.stick(`Detected gitRoot as \"${runtime.gitRoot}\"`)\n  scrolex.stick(`Detected npmRoot as \"${runtime.npmRoot}\"`)\n\n  // Create asset dirs and git ignores\n  if (cmdName.match(/^build|install|start/)) {\n    utils.initProject(runtime)\n  }\n\n  // Run Hooks\n  if (cmdName.match(/^build:(assets|content)/)) {\n    ['prebuild', 'prebuild:production', 'prebuild:development'].forEach(async (hook) => {\n      if (runtime[hook]) {\n        const needEnv = hook.split(':')[1]\n        if (!needEnv || runtime.lanyonEnv === needEnv) {\n          let squashedHooks = runtime[hook]\n          if (_.isArray(runtime[hook])) {\n            squashedHooks = runtime[hook].join(' && ')\n          }\n          await scrolex.exe(squashedHooks, {\n            cwd: runtime.projectDir,\n          })\n          // scrolex.stick(`${hook} done`)\n        }\n      }\n    })\n  }\n\n  // Write all config files to cacheDir\n  scrolex.stick('Writing configs')\n  utils.writeConfig(config)\n\n  // Run cmd arg\n  if (_.isFunction(cmd)) {\n    scrolex.stick(`Running ${cmdName} function`)\n    cmd(runtime, err => {\n      if (err) {\n        scrolex.failure(`${cmdName} function exited with error ${err}`)\n        process.exit(1)\n      }\n      scrolex.stick(`${cmdName} done`)\n    })\n  } else if (_.isString(cmd)) {\n    cmd = cmd.replace(/\\[lanyon]/g, `node ${__filename}`) // eslint-disable-line no-path-concat\n    cmd = cmd.replace(/\\[lanyonDir]/g, runtime.lanyonDir)\n    cmd = cmd.replace(/\\[contentBuildDir]/g, runtime.contentBuildDir)\n    cmd = cmd.replace(/\\[projectDir]/g, runtime.projectDir)\n    cmd = cmd.replace(/\\[cacheDir]/g, runtime.cacheDir)\n\n    const npmBins = {\n      'browser-sync' : '/node_modules/browser-sync/bin/browser-sync.js',\n      'webpack'      : '/node_modules/webpack/bin/webpack.js',\n      // 'imagemin'     : '/node_modules/imagemin-cli/cli.js',\n      'nodemon'      : '/node_modules/nodemon/bin/nodemon.js',\n      'npm-run-all'  : '/node_modules/npm-run-all/bin/npm-run-all/index.js',\n      'parallelshell': '/node_modules/parallelshell/index.js',\n    }\n    for (const name in npmBins) {\n      const tests = [\n        runtime.lanyonDir + npmBins[name],\n        runtime.gitRoot + npmBins[name],\n        runtime.projectDir + npmBins[name],\n        `${runtime.projectDir}/..${npmBins[name]}`,\n      ]\n\n      let found = false\n      tests.forEach(test => {\n        if (shell.test('-f', test)) {\n          npmBins[name] = test\n          found         = true\n        }\n      })\n\n      if (!found) {\n        throw new Error(`Cannot find dependency \"${name}\" in \"${tests.join('\", \"')}\"`)\n      }\n      const pat = new RegExp(`(\\\\s|^)${name}(\\\\s|$)`)\n      cmd = cmd.replace(pat, `$1node ${npmBins[name]}$2`)\n    }\n\n    cmd = cmd.replace(/(\\s|^)jekyll(\\s|$)/, `$1${runtime.binDir}/jekyll$2`)\n    cmd = cmd.replace(/(\\s|^)bundler(\\s|$)/, `$1${runtime.binDir}/bundler$2`)\n\n    await scrolex.exe(cmd, {\n      cwd  : runtime.cacheDir,\n      stdio: cmdName.match(/^container:/) ? 'inherit' : 'pipe',\n      mode : cmd.indexOf(__filename) === -1 && !cmdName.match(/^container:/)\n        ? (process.env.SCROLEX_MODE || 'singlescroll')\n        : 'passthru',\n    })\n  } else {\n    scrolex.failure(`\"${cmdName}\" is not a valid Lanyon command. Pick from: ${Object.keys(scripts).join(', ')}.`)\n  }\n}\n"]}