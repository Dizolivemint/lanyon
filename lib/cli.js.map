{"version":3,"sources":["../src/cli.js"],"names":["utils","require","preferLocalPackage","process","argv","__filename","cwd","version","_","config","shell","Scrolex","runtime","scripts","dockerCmd","console","log","cacheDir","gitRoot","npmRoot","trace","cmdName","cmd","match","initProject","forEach","hook","needEnv","split","lanyonEnv","squashedHooks","isArray","join","exe","projectDir","components","writeConfig","isFunction","err","error","exit","isString","env","replace","lanyonDir","contentBuildDir","npmBins","name","tests","found","test","Error","pat","RegExp","binDir","NODE_ENV","JEKYLL_ENV","LANYON_PROJECT","mode","Object","keys"],"mappings":"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","file":"cli.js","sourcesContent":["\nconst utils     = require('./utils')\nutils.preferLocalPackage(process.argv, __filename, process.cwd(), 'lanyon', 'lib/cli.js', require('../package.json').version)\nconst _         = require('lodash')\nconst config    = require('./config')\nconst shell     = require('shelljs')\nconst Scrolex  = require('scrolex')\nconst runtime   = config.runtime\n// var debug = require('depurar')('lanyon')\n\nconst scripts = {\n  'build:assets'             : 'webpack --config [cacheDir]/webpack.config.js',\n  'build:content:incremental': 'jekyll build --incremental --source [projectDir] --destination [contentBuildDir] --verbose --config [projectDir]/_config.yml,[cacheDir]/jekyll.config.yml,[cacheDir]/jekyll.lanyon_assets.yml',\n  'build:content:watch'      : 'nodemon --config [cacheDir]/nodemon.config.json --exec \"[lanyon] build:content:incremental' + '\"',\n  'build:content'            : 'jekyll build --source [projectDir] --destination [contentBuildDir] --verbose --config [projectDir]/_config.yml,[cacheDir]/jekyll.config.yml,[cacheDir]/jekyll.lanyon_assets.yml',\n  // @todo: useless until we have: https://github.com/imagemin/imagemin-cli/pull/11 and https://github.com/imagemin/imagemin/issues/226\n  'build:images'             : 'imagemin [projectDir]/assets/images --out-dir=[projectDir]/assets/build/images',\n  'build'                    : '[lanyon] build:assets && [lanyon] build:content', // <-- parrallel won't work for production builds, jekyll needs to copy assets into _site\n  'container:connect'        : utils.dockerCmd(runtime, 'sh', '--interactive --tty'),\n  'deploy'                   : require('./deploy'),\n  'encrypt'                  : require('./encrypt'),\n  'help'                     : 'jekyll build --help',\n  'list:ghpgems'             : 'bundler exec github-pages versions --gem',\n  'postinstall'              : require('./postinstall'),\n  'serve'                    : 'browser-sync start --config [cacheDir]/browsersync.config.js',\n  'start'                    : '[lanyon] build:assets && [lanyon] build:content:incremental && parallelshell \"[lanyon] build:content:watch\" \"[lanyon] serve\"',\n}\n\nconsole.log(`--> cacheDir is \"${runtime.cacheDir}\". `)\nconsole.log(`--> gitRoot is \"${runtime.gitRoot}\". `)\nconsole.log(`--> npmRoot is \"${runtime.npmRoot}\". `)\n\nif (runtime.trace) {\n  scripts['build:content:incremental'] += ' --trace'\n  scripts['build:content']             += ' --trace'\n}\n\nconst cmdName = process.argv[2]\nlet cmd = scripts[cmdName]\n\n// Create asset dirs and git ignores\nif (cmdName.match(/^build|postinstall|start/)) {\n  utils.initProject(runtime)\n}\n\n// Run Hooks\nif (cmdName.match(/^build:(assets|content)/)) {\n  ['prebuild', 'prebuild:production', 'prebuild:development'].forEach(hook => {\n    if (runtime[hook]) {\n      const needEnv = hook.split(':')[1]\n      if (!needEnv || runtime.lanyonEnv === needEnv) {\n        let squashedHooks = runtime[hook]\n        if (_.isArray(runtime[hook])) {\n          squashedHooks = runtime[hook].join(' && ')\n        }\n        Scrolex.exe(squashedHooks, { cwd: runtime.projectDir, components: `lanyon>build>${hook}` })\n        // console.log(`--> ${hook} done. `)\n      }\n    }\n  })\n}\n\n// Write all config files to cacheDir\nconsole.log('--> Writing configs. ')\nutils.writeConfig(config)\n\n// Run cmd arg\nif (_.isFunction(cmd)) {\n  console.log(`--> Running ${cmdName} function. `)\n  cmd(runtime, err => {\n    if (err) {\n      console.error(`${cmdName} function exited with error ${err}`)\n      process.exit(1)\n    }\n    console.log(`--> ${cmdName} done. `)\n  })\n} else if (_.isString(cmd)) {\n  cmd = cmd.replace(/\\[lanyon]/g, `node ${__filename}`) // eslint-disable-line no-path-concat\n  cmd = cmd.replace(/\\[lanyonDir]/g, runtime.lanyonDir)\n  cmd = cmd.replace(/\\[contentBuildDir]/g, runtime.contentBuildDir)\n  cmd = cmd.replace(/\\[projectDir]/g, runtime.projectDir)\n  cmd = cmd.replace(/\\[cacheDir]/g, runtime.cacheDir)\n\n  const npmBins = {\n    'browser-sync' : '/node_modules/browser-sync/bin/browser-sync.js',\n    'webpack'      : '/node_modules/webpack/bin/webpack.js',\n    'imagemin'     : '/node_modules/imagemin-cli/cli.js',\n    'nodemon'      : '/node_modules/nodemon/bin/nodemon.js',\n    'npm-run-all'  : '/node_modules/npm-run-all/bin/npm-run-all/index.js',\n    'parallelshell': '/node_modules/parallelshell/index.js',\n  }\n  for (const name in npmBins) {\n    const tests = [\n      runtime.lanyonDir + npmBins[name],\n      runtime.gitRoot + npmBins[name],\n      runtime.projectDir + npmBins[name],\n      `${runtime.projectDir}/..${npmBins[name]}`,\n    ]\n\n    let found = false\n    tests.forEach(test => {\n      if (shell.test('-f', test)) {\n        npmBins[name] = test\n        found = true\n      }\n    })\n\n    if (!found) {\n      throw new Error(`Cannot find dependency \"${name}\" in \"${tests.join('\", \"')}\"`)\n    }\n    const pat = new RegExp(`(\\\\s|^)${name}(\\\\s|$)`)\n    cmd = cmd.replace(pat, `$1node ${npmBins[name]}$2`)\n  }\n\n  cmd = cmd.replace(/(\\s|^)jekyll(\\s|$)/, `$1${runtime.binDir}/jekyll$2`)\n  cmd = cmd.replace(/(\\s|^)bundler(\\s|$)/, `$1${runtime.binDir}/bundler$2`)\n\n  var env = process.env\n  env.NODE_ENV       = runtime.lanyonEnv\n  env.JEKYLL_ENV     = runtime.lanyonEnv\n  env.LANYON_PROJECT = runtime.projectDir // <-- to preserve the cwd over multiple nested executes, if it wasn't initially set\n\n  console.log(`--> Running ${cmdName} shell cmd: \"${cmd}\"`)\n  Scrolex.exe(cmd, {\n    mode      : cmdName === 'start' ? 'singlescroll' : 'passthru',\n    env       : env,\n    cwd       : runtime.cacheDir,\n    components: `lanyon>${cmdName}`,\n  })\n  console.log(`--> ${cmdName} done. `)\n} else {\n  console.error(`--> \"${cmdName}\" is not a valid Lanyon command. Pick from: ${Object.keys(scripts).join(', ')}.`)\n}\n"]}