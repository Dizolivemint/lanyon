{"version":3,"sources":["../src/cli.js"],"names":["utils","require","whichPackage","preferLocalPackage","process","argv","__filename","cwd","version","_","config","shell","scrolex","runtime","main","module","failure","exit","scripts","dockerCmd","trace","cmdName","cmd","persistOpts","announce","addCommandAsComponent","components","env","NODE_ENV","lanyonEnv","JEKYLL_ENV","LANYON_PROJECT","projectDir","stick","type","pid","cacheDir","gitRoot","npmRoot","match","initProject","forEach","hook","needEnv","split","squashedHooks","isArray","join","exe","writeConfig","isFunction","err","isString","replace","lanyonDir","contentBuildDir","npmBins","name","tests","found","test","Error","pat","RegExp","binDir","stdio","mode","indexOf","SCROLEX_MODE","Object","keys"],"mappings":"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","file":"cli.js","sourcesContent":["\nconst utils        = require('./utils')\nconst whichPackage = utils.preferLocalPackage(process.argv, __filename, process.cwd(), 'lanyon', 'lib/cli.js', require('../package.json').version)\nconst _            = require('lodash')\nconst config       = require('./config')\nconst shell        = require('shelljs')\nconst scrolex      = require('scrolex')\nconst runtime      = config.runtime\n// var debug         = require('depurar')('lanyon')\n\nif (require.main !== module) {\n  scrolex.failure(`Please only used this module the commandline: node src/cli.js`)\n  process.exit(1)\n}\n\nconst scripts = {\n  'build:assets'             : 'webpack --config [cacheDir]/webpack.config.js',\n  'build:content:incremental': 'jekyll build --incremental --source [projectDir] --destination [contentBuildDir] --verbose --config [projectDir]/_config.yml,[cacheDir]/jekyll.config.yml,[cacheDir]/jekyll.lanyon_assets.yml',\n  'build:content:watch'      : 'nodemon --config [cacheDir]/nodemon.config.json --exec \"[lanyon] build:content:incremental' + '\"',\n  'build:content'            : 'jekyll build --source [projectDir] --destination [contentBuildDir] --verbose --config [projectDir]/_config.yml,[cacheDir]/jekyll.config.yml,[cacheDir]/jekyll.lanyon_assets.yml',\n  // @todo: useless until we have: https://github.com/imagemin/imagemin-cli/pull/11 and https://github.com/imagemin/imagemin/issues/226\n  'build:images'             : 'imagemin [projectDir]/assets/images --out-dir=[projectDir]/assets/build/images',\n  'build'                    : '[lanyon] build:assets && [lanyon] build:content', // <-- parrallel won't work for production builds, jekyll needs to copy assets into _site\n  'container:connect'        : utils.dockerCmd(runtime, 'sh', '--interactive --tty'),\n  'deploy'                   : require('./deploy'),\n  'encrypt'                  : require('./encrypt'),\n  'help'                     : 'jekyll build --help',\n  'list:ghpgems'             : 'bundler exec github-pages versions --gem',\n  'install'                  : require('./install'),\n  'serve'                    : 'browser-sync start --config [cacheDir]/browsersync.config.js',\n  'start'                    : '[lanyon] build:assets && [lanyon] build:content:incremental && parallelshell \"[lanyon] build:content:watch\" \"[lanyon] serve\"',\n}\n\nif (runtime.trace) {\n  scripts['build:content:incremental'] += ' --trace'\n  scripts['build:content']             += ' --trace'\n}\n\nconst cmdName = process.argv[2]\nlet cmd       = scripts[cmdName]\n\nscrolex.persistOpts({\n  announce             : true,\n  addCommandAsComponent: true,\n  components           : `lanyon>${cmdName}`,\n  env                  : Object.assign({}, process.env, {\n    NODE_ENV      : runtime.lanyonEnv,\n    JEKYLL_ENV    : runtime.lanyonEnv,\n    LANYON_PROJECT: runtime.projectDir, // <-- to preserve the cwd over multiple nested executes, if it wasn't initially set\n  }),\n})\n\nscrolex.stick(`Booting ${whichPackage.type} Lanyon->${cmdName}. Version: ${whichPackage.version} on PID: ${process.pid} from: ${__filename}`)\nscrolex.stick(`Detected cacheDir as \"${runtime.cacheDir}\"`)\nscrolex.stick(`Detected gitRoot as \"${runtime.gitRoot}\"`)\nscrolex.stick(`Detected npmRoot as \"${runtime.npmRoot}\"`)\n\n// Create asset dirs and git ignores\nif (cmdName.match(/^build|install|start/)) {\n  utils.initProject(runtime)\n}\n\n// Run Hooks\nif (cmdName.match(/^build:(assets|content)/)) {\n  ['prebuild', 'prebuild:production', 'prebuild:development'].forEach(hook => {\n    if (runtime[hook]) {\n      const needEnv = hook.split(':')[1]\n      if (!needEnv || runtime.lanyonEnv === needEnv) {\n        let squashedHooks = runtime[hook]\n        if (_.isArray(runtime[hook])) {\n          squashedHooks = runtime[hook].join(' && ')\n        }\n        scrolex.exe(squashedHooks, {\n          cwd: runtime.projectDir,\n        })\n        // scrolex.stick(`${hook} done`)\n      }\n    }\n  })\n}\n\n// Write all config files to cacheDir\nscrolex.stick('Writing configs')\nutils.writeConfig(config)\n\n// Run cmd arg\nif (_.isFunction(cmd)) {\n  scrolex.stick(`Running ${cmdName} function`)\n  cmd(runtime, err => {\n    if (err) {\n      scrolex.failure(`${cmdName} function exited with error ${err}`)\n      process.exit(1)\n    }\n    scrolex.stick(`${cmdName} done`)\n  })\n} else if (_.isString(cmd)) {\n  cmd = cmd.replace(/\\[lanyon]/g, `node ${__filename}`) // eslint-disable-line no-path-concat\n  cmd = cmd.replace(/\\[lanyonDir]/g, runtime.lanyonDir)\n  cmd = cmd.replace(/\\[contentBuildDir]/g, runtime.contentBuildDir)\n  cmd = cmd.replace(/\\[projectDir]/g, runtime.projectDir)\n  cmd = cmd.replace(/\\[cacheDir]/g, runtime.cacheDir)\n\n  const npmBins = {\n    'browser-sync' : '/node_modules/browser-sync/bin/browser-sync.js',\n    'webpack'      : '/node_modules/webpack/bin/webpack.js',\n    'imagemin'     : '/node_modules/imagemin-cli/cli.js',\n    'nodemon'      : '/node_modules/nodemon/bin/nodemon.js',\n    'npm-run-all'  : '/node_modules/npm-run-all/bin/npm-run-all/index.js',\n    'parallelshell': '/node_modules/parallelshell/index.js',\n  }\n  for (const name in npmBins) {\n    const tests = [\n      runtime.lanyonDir + npmBins[name],\n      runtime.gitRoot + npmBins[name],\n      runtime.projectDir + npmBins[name],\n      `${runtime.projectDir}/..${npmBins[name]}`,\n    ]\n\n    let found = false\n    tests.forEach(test => {\n      if (shell.test('-f', test)) {\n        npmBins[name] = test\n        found         = true\n      }\n    })\n\n    if (!found) {\n      throw new Error(`Cannot find dependency \"${name}\" in \"${tests.join('\", \"')}\"`)\n    }\n    const pat = new RegExp(`(\\\\s|^)${name}(\\\\s|$)`)\n    cmd = cmd.replace(pat, `$1node ${npmBins[name]}$2`)\n  }\n\n  cmd = cmd.replace(/(\\s|^)jekyll(\\s|$)/, `$1${runtime.binDir}/jekyll$2`)\n  cmd = cmd.replace(/(\\s|^)bundler(\\s|$)/, `$1${runtime.binDir}/bundler$2`)\n\n  scrolex.exe(cmd, {\n    cwd  : runtime.cacheDir,\n    stdio: cmdName.match(/^container:/) ? 'inherit' : 'pipe',\n    mode : cmd.indexOf(__filename) === -1 && !cmdName.match(/^container:/)\n      ? (process.env.SCROLEX_MODE || 'singlescroll')\n      : 'passthru',\n  })\n} else {\n  scrolex.failure(`\"${cmdName}\" is not a valid Lanyon command. Pick from: ${Object.keys(scripts).join(', ')}.`)\n}\n"]}